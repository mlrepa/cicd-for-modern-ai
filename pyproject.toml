[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cicd-for-modern-ai"
version = "0.1.0"
description = "CI/CD examples and best practices for modern AI and machine learning projects"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "MLRepa", email = "info@mlrepa.io"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core ML dependencies
dependencies = [
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "joblib>=1.3.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

# Security scanning dependencies
security = [
    "safety>=2.3.0",
    "bandit>=1.7.0",
]

# All dependencies for CI/CD
ci = [
    "cicd-for-modern-ai[dev,security]",
]

[project.urls]
Homepage = "https://github.com/mlrepa/cicd-for-modern-ai"
Repository = "https://github.com/mlrepa/cicd-for-modern-ai"
Documentation = "https://github.com/mlrepa/cicd-for-modern-ai#readme"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "F", "I", "N", "W"]

[tool.ruff.isort]
known-first-party = ["cicd_for_modern_ai"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov --cov-report=html --cov-report=term-missing"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 
