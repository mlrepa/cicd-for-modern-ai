# GitLab CI example with Docker and artifacts
# This shows more advanced concepts like Docker usage and artifacts

stages:
  - build
  - train
  - deploy

variables:
  DOCKER_IMAGE_NAME: cicd-for-modern-ai

build_artifacts:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "Build a Docker image"
    # Build and tag a Docker image
    - docker pull hello-world
    - docker image tag hello-world:latest $DOCKER_IMAGE_NAME:latest
    - echo $(docker images)
    # Archive the Docker image
    - docker save -o docker-$DOCKER_IMAGE_NAME.tar $DOCKER_IMAGE_NAME:latest  
  artifacts:
    paths:
      - docker-$DOCKER_IMAGE_NAME.tar  # Archive the Docker image
      
test_code:
  stage: build
  needs: [build_artifacts]
  script:
    - echo "Test Docker image exists"
    # Run test - print OK if the Docker image archive exists
    - ls
    - if ls | grep docker-$DOCKER_IMAGE_NAME.tar; then echo "OK"; else echo "NOT OK"; fi
    - echo "Test job is complete"

train_model:
  stage: train
  script:
    - echo "This job trains a new model"
    # Simulate training by creating a model file
    - echo "Training model..."
    - echo "model_data" > model.joblib
    - echo "Model train is complete"
  artifacts:
    paths:
      - model.joblib  # Archive the model file

deploy_model:
  stage: deploy
  needs: [train_model]
  script:
    - echo "This job deploys a model"
    # Use the model.joblib from the artifacts
    - ls 
    - echo "Model deploy is complete"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual  # Require manual approval for deployment
