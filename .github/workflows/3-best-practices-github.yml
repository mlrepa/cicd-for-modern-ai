# GitHub Actions Best Practices Example
# This example demonstrates advanced CI/CD patterns for production use
# Based on GitHub Actions 2024 recommendations
# Equivalent to gitlab-examples/3-best-practices-gitlab.yml

name: 3 - Best Practices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE_NAME: ghcr.io/${{ github.repository }}/ml-model
  REGISTRY: ghcr.io

jobs:
  # Build stage with modern Docker practices
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Comprehensive testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Install dependencies
        run: |
          uv pip install --system --requirement pyproject.toml --extra dev
      
      - name: Run comprehensive tests
        run: |
          echo "Running comprehensive tests..."
          python -c "
          import json
          results = {'coverage': 85.5, 'tests_passed': 23, 'tests_total': 25}
          with open('test_results.json', 'w') as f:
              json.dump(results, f)
          print('Tests completed')
          "
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.json
          retention-days: 7

  # Security scanning
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Install security tools
        run: |
          uv pip install --system --requirement pyproject.toml --extra security
      
      - name: Run safety check
        continue-on-error: true
        run: |
          safety check --json --output safety-report.json || true
      
      - name: Run bandit security scan
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json

  # ML model training with experiment tracking
  train_model:
    name: Train Model
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Install ML dependencies
        run: |
          uv pip install --system --requirement pyproject.toml
      
      - name: Train model
        run: |
          python -c "
          import json
          from datetime import datetime
          
          # Simulate model training
          model_metrics = {
              'accuracy': 0.95,
              'precision': 0.92,
              'recall': 0.88,
              'f1_score': 0.90,
              'model_version': '${{ github.sha }}'[:8],
              'training_date': datetime.now().isoformat()
          }
          
          with open('model_metrics.json', 'w') as f:
              json.dump(model_metrics, f, indent=2)
          
          print(f'Model trained successfully: {model_metrics}')
          "
      
      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            model_metrics.json
            *.pkl
          retention-days: 30

  # Model validation
  validate_model:
    name: Validate Model
    runs-on: ubuntu-latest
    needs: [train_model]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-model
      
      - name: Validate model quality
        run: |
          python -c "
          import json
          
          with open('model_metrics.json', 'r') as f:
              metrics = json.load(f)
          
          accuracy_threshold = 0.8
          if metrics['accuracy'] >= accuracy_threshold:
              print('‚úÖ Model passes quality gates')
          else:
              print('‚ùå Model fails quality gates')
              exit(1)
          "

  # Staging deployment
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate_model]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-api.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Health check: https://staging-api.example.com/health"

  # Production deployment with manual approval
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://api.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "Production endpoint: https://api.example.com" 
